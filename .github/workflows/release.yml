name: Release

on:
  push:
    branches:
      - feature/automation

jobs:
  exploration:
    runs-on: ubuntu-latest
    steps:
      # Create a release PR
      - uses: GoogleCloudPlatform/release-please-action@v2
        id: release_pr
        with:
          release-type: simple
          changelog-types: '[{"type":"feat","section":"Features","hidden":false},{"type":"fix","section":"Bug Fixes","hidden":false},{"type":"chore","section":"Miscellaneous","hidden":false}]'
          default-branch: feature/automation
          pull-request-title-pattern: ${scope} Release${component} ${version}

      # grab our branch from the above PR
      - uses: actions/github-script@v3
        id: checkout_branch
        if: ${{ steps.release_pr.outputs.pr && !steps.release_pr.outputs.release_created }}
        with:
          script: |
            const response = await github.pulls.get({
              pull_number: ${{ steps.release_pr.outputs.pr }},
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            core.info("ðŸŒ¿ branch ðŸŒ¿:" +  response.data.head.ref);
            core.setOutput("branch", response.data.head.ref);

      # checkout PR branch
      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.checkout_branch.outputs.branch }}
        if: ${{ steps.release_pr.outputs.pr && !steps.release_pr.outputs.release_created }}

      # inject version into environment
      - if: ${{ steps.release_pr.outputs.pr && !steps.release_pr.outputs.release_created }}
        run: |
          echo "sys_version=$(cat ./version.txt)" >> $GITHUB_ENV
          cat ./version.txt

      # Updates the manifest and download URLS in system.json
      - name: Update System.json
        if: ${{ steps.release_pr.outputs.pr && !steps.release_pr.outputs.release_created }}
        uses: microsoft/variable-substitution@v1
        with:
          files: "system.json"
        env:
          version: ${{ env.sys_version }}
          manifest: https://github.com/${{github.repository}}/releases/latest/download/system.json
          download: https://github.com/${{github.repository}}/releases/download/${{env.sys_version}}/coriolis.zip

      # release artifacts
      - name: "output test"
        if: ${{ steps.release_pr.outputs.release_created }}
        run: |
          echo "version is ${{github.event.release.outputs.major}}.${{github.event.release.outputs.minor}}.${{github.event.release.outputs.patch}}"
          echo "manifest is  https://github.com/${{github.repository}}/releases/latest/download/system.json"
          echo "download is https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/coriolis.zip"
