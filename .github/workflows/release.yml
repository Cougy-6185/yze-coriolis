name: Release

on:
  push:
    branches:
      - feature/automation

jobs:
  exploration:
    runs-on: ubuntu-latest
    steps:
      # Create an initial release PR that changes will be tracked to.
      - uses: GoogleCloudPlatform/release-please-action@v2
        id: release_pr
        with:
          release-type: simple
          changelog-types: '[{"type":"feat","section":"Features","hidden":false},{"type":"fix","section":"Bug Fixes","hidden":false},{"type":"chore","section":"Miscellaneous","hidden":false}]'
          default-branch: feature/automation
          pull-request-title-pattern: ${scope} Release${component} ${version}

      # grab our branch from the above PR
      - uses: actions/github-script@v3
        id: checkout_branch
        if: ${{ steps.release_pr.outputs.pr && !steps.release_pr.outputs.release_created }}
        with:
          script: |
            const response = await github.pulls.get({
              pull_number: ${{ steps.release_pr.outputs.pr }},
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            core.info("ðŸŒ¿ branch ðŸŒ¿:" +  response.data.head.ref);
            core.setOutput("branch", response.data.head.ref);

      # checkout PR branch
      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.checkout_branch.outputs.branch }}
        if: ${{ steps.release_pr.outputs.pr && !steps.release_pr.outputs.release_created }}

      # inject version into environment
      - if: ${{ steps.release_pr.outputs.pr && !steps.release_pr.outputs.release_created }}
        run: |
          echo "sys_version=$(cat ./version.txt)" >> $GITHUB_ENV
          cat ./version.txt

      # Updates the manifest and download URLS in system.json
      - name: Update system.json
        if: ${{ steps.release_pr.outputs.pr && !steps.release_pr.outputs.release_created }}
        uses: microsoft/variable-substitution@v1
        with:
          files: "system.json"
        env:
          version: ${{ env.sys_version }}
          manifest: https://github.com/${{github.repository}}/releases/latest/download/system.json
          download: https://github.com/${{github.repository}}/releases/download/v${{env.sys_version}}/coriolis.zip

      # with the initially opened PR, update our system.json
      - name: "Commit system.json"
        if: ${{ steps.release_pr.outputs.pr && !steps.release_pr.outputs.release_created }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add system.json
          git commit -m "ci: updated manifest data"
          git push

      # In the event we've created an actual release, we need to zip up files and attach them to the release.
      # checkout release branch
      - uses: actions/checkout@v2
        if: ${{ steps.release_pr.outputs.release_created }}

      # zip our assets
      - name: "Create Zipped Artifact"
        if: ${{ steps.release_pr.outputs.release_created }}
        run: zip -r ./coriolis.zip LICENSE README.md CHANGELOG.md system.json template.json css/ data/ images/ lang/ lib/ module/ packs/ templates/

      # upload artifacts
      - name: "ðŸ“¦ Add Artifacts to Release ðŸ“¦"
        if: ${{ steps.release_pr.outputs.release_created }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: coriolis.zip
          asset_name: coriolis.zip
          tag: ${{ github.ref }}
          overwrite: true

      # - name: "ðŸ“¦ Add Artifacts to Release ðŸ“¦"
      #   if: ${{ steps.release_pr.outputs.release_created }}
      #   run: |
      #     echo "version is ${{ steps.release_pr.outputs.major }}.${{ steps.release_pr.outputs.minor }}.${{ steps.release_pr.outputs.patch }}"
      #     echo "manifest is https://github.com/${{github.repository}}/releases/latest/download/system.json"
      #     echo "download is https://github.com/${{github.repository}}/releases/download/v${{ steps.release_pr.outputs.major }}.${{ steps.release_pr.outputs.minor }}.${{ steps.release_pr.outputs.patch }}/coriolis.zip"
